import numpy as np
import matplotlib.pyplot as plt

def wavelet_klauder(t, f1, f2, T_sweep):

    dt = t[1] - t[0]
    n_sweep = int(T_sweep / dt)     # Number of samples for the sweep
    t_sweep = np.linspace(0, T_sweep, n_sweep, endpoint=False)
    sweep = np.sin(2 * np.pi * (f1 * t_sweep + 0.5 * (f2 - f1) / T_sweep * t_sweep**2))   # Sweep from f2 - f1
    # Compute the autocorrelation of the sweep 
    ac = np.correlate(sweep, sweep, mode='full')
    tau = np.arange(-n_sweep + 1, n_sweep) * dt    # Lag-time vector
    ac = ac / np.max(np.abs(ac))
    wavelet = np.interp(t, tau, ac)
    
    return wavelet

# Define parameters for the synthetic seismogram
dt = 0.0001       # sampling interval in seconds
nt = 5001         # number of samples
T_total = nt * dt # total record length in seconds
t = np.linspace(0, T_total, nt, endpoint=False)  # time vector for seismogram
t_shifted = t - (T_total / 2)  # center time vector about zero

# Parameters for the Klauder wavelet (choose as in Ryan, 1994)
f1 = 10      # terminal low frequency (Hz)
f2 = 40      # terminal high frequency (Hz)
T_sweep = 7  # sweep duration in seconds

# Generate the Klauder wavelet
w = wavelet_klauder(t_shifted, f1, f2, T_sweep)

# Wavelet Plot (Time-domain filter)
plt.figure()
plt.plot(t_shifted, w, '--.')
plt.title(f"Klauder Wavelet (f1 = {f1} Hz, f2 = {f2} Hz, T_sweep = {T_sweep*1000:.0f} ms)")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude")
plt.show()

# Velocity model 
vel = np.zeros(nt)
vel[0:nt//3] = 1500
vel[nt//3:2*nt//3] = 2500
vel[2*nt//3:] = 2000

plt.figure()
plt.plot(t, vel, '--')
plt.title("Velocity Model")
plt.xlabel("Time (s)")
plt.ylabel("Velocity (m/s)")
plt.gca().invert_yaxis()
plt.show()

# Density model
dens = np.zeros(nt)
dens[0:nt//3] = 2000 
dens[nt//3:2*nt//3] = 2400 
dens[2*nt//3:] = 2200

plt.figure()
plt.plot(t, dens, '--')
plt.title("Density Model")
plt.xlabel("Time (s)")
plt.ylabel("Density (kg/m³)")
plt.gca().invert_yaxis()
plt.show()

# Acoustic impedance calculation
impedance = vel * dens

plt.figure()
plt.plot(t, impedance, '--')
plt.title("Impedance of the Medium")
plt.xlabel("Time (s)")
plt.ylabel("Impedance (kg/m²·s)")
plt.gca().invert_yaxis()
plt.show()
  
# Reflectivity calculation: R = (Z2 - Z1) / (Z2 + Z1)
reflectivity_imp = np.zeros(nt)
reflectivity_imp[1:] = (impedance[1:] - impedance[:-1]) / (impedance[1:] + impedance[:-1])

plt.figure()
plt.plot(reflectivity_imp, t, '--')
plt.title("Reflectivity Calculated from Impedance")
plt.xlabel("Reflection Coefficient")
plt.ylabel("Time (s)")
plt.gca().invert_yaxis()
plt.show()

# Convolution to produce the synthetic seismogram
synthetic_trace = np.convolve(reflectivity_imp, w, mode="same")

plt.figure()
plt.plot(synthetic_trace, t, '--')
plt.title("Synthetic Seismogram")
plt.xlabel("Amplitude")
plt.ylabel("Time (s)")
plt.gca().invert_yaxis()
plt.show()

# Amplitude Spectrum of the Klauder Filter
W = np.fft.fft(w)
W_shifted = np.fft.fftshift(W)
freq = np.fft.fftfreq(nt, d=dt)
freq_shifted = np.fft.fftshift(freq)

plt.figure()
plt.plot(freq_shifted, np.abs(W_shifted))
plt.title("Amplitude Spectrum of the Klauder Filter")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Amplitude")
plt.xlim(0, 100) 
plt.grid(True)
plt.show()
