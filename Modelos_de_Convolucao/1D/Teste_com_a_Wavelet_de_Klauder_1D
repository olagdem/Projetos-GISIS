import numpy as np
import matplotlib.pyplot as plt

# Defining the Klauder wavelet function
def wavelet_klauder(t, f1, f2, T_sweep):

    dt = t[1] - t[0]
    n_sweep = int(T_sweep / dt)                    # Number of samples for the sweep
    t_sweep = np.linspace(0, T_sweep, n_sweep, endpoint=False)
    sweep = np.sin(2 * np.pi * (f1 * t_sweep + 0.5 * (f2 - f1) / T_sweep * t_sweep**2))   # Sweep from f2 - f1
    # Compute the autocorrelation of the sweep 
    ac = np.correlate(sweep, sweep, mode='full')
    tau = np.arange(-n_sweep + 1, n_sweep) * dt    # Lag-time vector
    ac = ac / np.max(np.abs(ac))
    wavelet = np.interp(t, tau, ac)
    
    return wavelet

# Defining parameters 
dt = 0.0001                                       # Sample interval
nt = 5001                                         # Number of samples
T_total = nt * dt                                 # Total record length in seconds
t = np.linspace(0, T_total, nt, endpoint=False)   # Time vector for seismogram
t_shifted = t - (T_total / 2)                     # Center time vector about zero

# Klauder filter parameters
f1 = 10                                           # Terminal low frequency 
f2 = 40                                           # Terminal high frequency 
T_sweep = 7                                       # Sweep duration in seconds

# Generating the Klauder wavelet
w = wavelet_klauder(t_shifted, f1, f2, T_sweep)

# Plot the Klauder Wavelet
plt.figure()
plt.plot(t_shifted, w, '--.')
plt.title(f"Klauder Wavelet (f1 = {f1} Hz, f2 = {f2} Hz, T_sweep = {T_sweep*1000:.0f} ms)")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude")
plt.show()

# Defining the velocity model 
vel = np.zeros(nt)
vel[0:nt//3] = 1500
vel[nt//3:2*nt//3] = 2500
vel[2*nt//3:] = 2000

# Plotting the velocity model
plt.figure()
plt.plot(t, vel, '--')
plt.title("Velocity Model")
plt.xlabel("Time (s)")
plt.ylabel("Velocity (m/s)")
plt.gca().invert_yaxis()
plt.show()

# Defining the density model
dens = np.zeros(nt)
dens[0:nt//3] = 2000 
dens[nt//3:2*nt//3] = 2400 
dens[2*nt//3:] = 2200

# Plotting the density model
plt.figure()
plt.plot(t, dens, '--')
plt.title("Density Model")
plt.xlabel("Time (s)")
plt.ylabel("Density (kg/m³)")
plt.gca().invert_yaxis()
plt.show()

# Defining the impedance
impedance = vel * dens

# Plotting the impedance model
plt.figure()
plt.plot(t, impedance, '--')
plt.title("Impedance of the Medium")
plt.xlabel("Time (s)")
plt.ylabel("Impedance (kg/m²·s)")
plt.gca().invert_yaxis()
plt.show()
  
# Defining reflectivity: R = (Z2 - Z1) / (Z2 + Z1)
reflectivity_imp = np.zeros(nt)
reflectivity_imp[1:] = (impedance[1:] - impedance[:-1]) / (impedance[1:] + impedance[:-1])

# Plotting the reflectivity model
plt.figure()
plt.plot(reflectivity_imp, t, '--')
plt.title("Reflectivity Calculated from Impedance")
plt.xlabel("Reflection Coefficient")
plt.ylabel("Time (s)")
plt.gca().invert_yaxis()
plt.show()

# Defining the convolution 
synthetic_trace = np.convolve(reflectivity_imp, w, mode="same")

# Plotting the convolution model
plt.figure()
plt.plot(synthetic_trace, t, '--')
plt.title("Synthetic Seismogram")
plt.xlabel("Amplitude")
plt.ylabel("Time (s)")
plt.gca().invert_yaxis()
plt.show()

# Defining the amplitude spectrum
W = np.fft.fft(w)
W_shifted = np.fft.fftshift(W)
freq = np.fft.fftfreq(nt, d=dt)
freq_shifted = np.fft.fftshift(freq)

# Plotting the amplitude spectrum
plt.figure()
plt.plot(freq_shifted, np.abs(W_shifted))
plt.title("Amplitude Spectrum of the Klauder Filter")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Amplitude")
plt.xlim(0, 100) 
plt.grid(True)
plt.show()

