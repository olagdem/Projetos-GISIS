import numpy as np
import matplotlib.pyplot as plt

def wavelet_ormsby(t, f1, f2, f3, f4):
    dt = t[1] - t[0]
    n = len(t)
    
    # Frequency vector 
    f = np.fft.fftfreq(n, dt)
    abs_f = np.abs(f)
    # Trapezoidal filter
    filter_ormsby = np.zeros(n)
    # Ramp up: F1 - F2
    ramp_up = (abs_f >= f1) & (abs_f < f2)
    filter_ormsby[ramp_up] = (abs_f[ramp_up] - f1) / (f2 - f1)
    
    # Flat top: Amplitude = 1 between F2 and F3
    flat = (abs_f >= f2) & (abs_f <= f3)
    filter_ormsby[flat] = 1.0
    
    # Ramp down: F3 - F4
    ramp_down = (abs_f > f3) & (abs_f <= f4)
    filter_ormsby[ramp_down] = (f4 - abs_f[ramp_down]) / (f4 - f3)
    
    # Computing the Inverse Fourier Transform
    wavelet = np.fft.ifft(filter_ormsby).real
    wavelet = np.fft.fftshift(wavelet)
    return wavelet

# Defining parameters for the synthetic seismogram
dt = 0.0001       # sampling interval in seconds
nt = 1001         # number of samples
T = nt * dt       # total record length in seconds
t = np.linspace(0, T, nt, endpoint=False)  # time vector for seismogram
t_shifted = t - (T / 2)

# Frequencies for the Ormsby wavelet
f1, f2, f3, f4 = 5, 10, 40, 45  
w = wavelet_ormsby(t_shifted, f1, f2, f3, f4)  # Generate centered Ormsby wavelet

# Wavelet Plot (Time-domain filter)
plt.figure()
plt.plot(t_shifted, w, '--.')
plt.title(f"Ormsby Wavelet (f1 = {f1} Hz, f2 = {f2} Hz, f3 = {f3} Hz, f4 = {f4} Hz)")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude")
plt.show()

# Velocity model 
vel = np.zeros(nt)
vel[0:nt//3] = 1500
vel[nt//3:2*nt//3] = 2500
vel[2*nt//3:] = 2000

plt.figure()
plt.plot(t, vel, '--')
plt.title("Velocity Model")
plt.xlabel("Time (s)")
plt.ylabel("Velocity (m/s)")
plt.gca().invert_yaxis()
plt.show()

# Density model
dens = np.zeros(nt)
dens[0:nt//3] = 2000 
dens[nt//3:2*nt//3] = 2400 
dens[2*nt//3:] = 2200

plt.figure()
plt.plot(t, dens, '--')
plt.title("Density Model")
plt.xlabel("Time (s)")
plt.ylabel("Density (kg/m³)")
plt.gca().invert_yaxis()
plt.show()

# Acoustic impedance calculation
impedance = vel * dens

plt.figure()
plt.plot(t, impedance, '--')
plt.title("Impedance of the Medium")
plt.xlabel("Time (s)")
plt.ylabel("Impedance (kg/m²·s)")
plt.gca().invert_yaxis()
plt.show()
  
# Reflectivity calculation: R = (Z2 - Z1) / (Z2 + Z1)
reflectivity_imp = np.zeros(nt)
reflectivity_imp[1:] = (impedance[1:] - impedance[:-1]) / (impedance[1:] + impedance[:-1])

plt.figure()
plt.plot(reflectivity_imp, t, '--')
plt.title("Reflectivity Calculated from Impedance")
plt.xlabel("Reflection Coefficient")
plt.ylabel("Time (s)")
plt.gca().invert_yaxis()
plt.show()

# Convolution to produce the synthetic seismogram
synthetic_trace = np.convolve(reflectivity_imp, w, mode="same")

plt.figure()
plt.plot(synthetic_trace, t, '--')
plt.title("Synthetic Seismogram")
plt.xlabel("Amplitude")
plt.ylabel("Time (s)")
plt.gca().invert_yaxis()
plt.show()

# Amplitude Spectrum 
W = np.fft.fft(w)
W_shifted = np.fft.fftshift(W)
freq = np.fft.fftfreq(nt, d=dt)
freq_shifted = np.fft.fftshift(freq)

plt.figure()
plt.plot(freq_shifted, np.abs(W_shifted), 'r', lw=2)
plt.title("Amplitude Spectrum of the Ormsby Wavelet")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Amplitude")
plt.xlim(0, 100)  
plt.grid(True)
plt.show()
