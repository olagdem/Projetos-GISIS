import os
import numpy as np
import pandas as pd
import rasterio
from functools import reduce

def tif_to_dataframe(file, value_name):
    """
    Reads a single TIFF file and returns a DataFrame with the geographic coordinates (Latitude, Longitude)
    and the pixel values under the column specified by value_name.
    """
    with rasterio.open(file) as src:
        data = src.read(1)
        transform = src.transform
        height, width = data.shape

        latitudes = []
        longitudes = []
        values = []
        # Loop over all pixels
        for row in range(height):
            for col in range(width):
                # Compute geographic coordinates (lon, lat) from pixel coordinate (col, row)
                lon, lat = transform * (col, row)
                latitudes.append(lat)
                longitudes.append(lon)
                values.append(data[row, col])
    
    df = pd.DataFrame({
        'Latitude': latitudes,
        'Longitude': longitudes,
        value_name: values
    })
    
    return df

def round_coords(df, decimals=6):
    """
    Round the coordinate columns to help merging pixels that represent the same location.
    """
    df['Latitude'] = df['Latitude'].round(decimals)
    df['Longitude'] = df['Longitude'].round(decimals)
    return df


# Filepath to the TIFF files.
elevation_files = [
    r'c:\Users\lzlag\Documents\Maciços Alcalinos (Elevation).tif',
    r'c:\Users\lzlag\Documents\Recorte Maciços (Elevation).tif'
]
bathymetry_files = [
    r'c:\Users\lzlag\Documents\Maciços Alcalinos (Bathymetry).tif',
    r'c:\Users\lzlag\Documents\Recorte Maciços (Bathymetry).tif'
]
gravity_files = [
    r'c:\Users\lzlag\Documents\Maciços Alcalinos (Free-Air).tif',
    r'C:\Users\lzlag\Documents\Recorte Maciços (Free-Air).tif'
]

# Creating individual DataFrames first
df_elev1 = tif_to_dataframe(elevation_files[0], 'Elevation1')
df_elev2 = tif_to_dataframe(elevation_files[1], 'Elevation2')
df_bathy1 = tif_to_dataframe(bathymetry_files[0], 'Bathymetry1')
df_bathy2 = tif_to_dataframe(bathymetry_files[1], 'Bathymetry2')
df_grav1 = tif_to_dataframe(gravity_files[0], 'Gravity1')
df_grav2 = tif_to_dataframe(gravity_files[1], 'Gravity2')

# Rounding coordinates
dfs = [df_elev1, df_elev2, df_bathy1, df_bathy2, df_grav1, df_grav2]
dfs = [round_coords(df) for df in dfs]

# Merge both DataFrames
df_merged = reduce(lambda left, right: pd.merge(left, right, on=['Latitude', 'Longitude'], how='outer'), dfs)

# Fill missing values with 0 
df_merged['Elevation1'] = df_merged['Elevation1'].fillna(0)
df_merged['Bathymetry1'] = df_merged['Bathymetry1'].fillna(0)
df_merged['Gravity1'] = df_merged['Gravity1'].fillna(0)

# Optionally, sort the resulting DataFrame by latitude and longitude.
df_merged.sort_values(by=['Latitude', 'Longitude'], inplace=True)

# Display the head of the DataFrame.
print(df_merged.head())


